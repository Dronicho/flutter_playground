/// Flutter icons BasicMathIcons
/// Copyright (C) 2021 by original authors @ fluttericon.com, fontello.com
/// This font was generated by FlutterIcon.com, which is derived from Fontello.
///
/// To use this font, place it in your fonts/ directory and include the
/// following in your pubspec.yaml
///
/// flutter:
///   fonts:
///    - family:  BasicMathIcons
///      fonts:
///       - asset: fonts/BasicMathIcons.ttf
///
/// 
///
import 'package:flutter/widgets.dart';

class BasicMathIcons {
  BasicMathIcons._();

  static const _kFontFam = 'BasicMathIcons';
  static const String? _kFontPkg = null;

  static const IconData dx = IconData(0xe800, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData close_parenthesis = IconData(0xe801, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData exponent = IconData(0xe802, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData fraction = IconData(0xe803, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData square_root = IconData(0xe804, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData smaller = IconData(0xe805, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData greater = IconData(0xe806, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData plus_minus = IconData(0xe807, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData percent = IconData(0xe808, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData x_lines = IconData(0xe809, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData i = IconData(0xe80a, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData e = IconData(0xe80b, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData log = IconData(0xe80c, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData ln = IconData(0xe80d, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData infinity = IconData(0xe80e, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData lim = IconData(0xe80f, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData prime = IconData(0xe810, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData f____ = IconData(0xe811, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData integral_1 = IconData(0xe812, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData evaluation = IconData(0xe813, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData pi = IconData(0xe814, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData x = IconData(0xe815, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData y = IconData(0xe816, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData theta = IconData(0xe817, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData function = IconData(0xe818, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData bracket_left = IconData(0xe819, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData bracket_right = IconData(0xe81a, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData mixed_number = IconData(0xe81b, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData subscript = IconData(0xe81c, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData nth_root = IconData(0xe81d, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData smaller_equal = IconData(0xe81e, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData greater_equal = IconData(0xe81f, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData lim_x_to = IconData(0xe820, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData dx_dy = IconData(0xe821, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData integral = IconData(0xe822, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData y_deriv = IconData(0xe823, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData derivative = IconData(0xe824, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData curly_bracket_left = IconData(0xe825, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData curly_bracket_right = IconData(0xe826, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData lim_x_to_infinity_1 = IconData(0xe827, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData dd = IconData(0xe828, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData lim_x_to_infinity = IconData(0xe829, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData d = IconData(0xe82a, fontFamily: _kFontFam, fontPackage: _kFontPkg);
  static const IconData d_1 = IconData(0xe82b, fontFamily: _kFontFam, fontPackage: _kFontPkg);
}
